package org.nebulostore.gui;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionListener;
import java.io.File;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JEditorPane;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeWillExpandListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

import org.nebulostore.appcore.addressing.AppKey;
import org.nebulostore.appcore.addressing.NebuloAddress;
import org.nebulostore.appcore.model.NebuloElement;

/**
 * Graphical User Interface view.
 * @author Jadwiga Kanska
 */
public class GUIView extends JFrame {
  private static final long serialVersionUID = -8685218429899460856L;

  private JTextField rootAddressTextField_;
  private JButton getRootButton_;

  private JTree listTree_;
  private DefaultTreeModel listTreeModel_;
  private DefaultMutableTreeNode rootTreeNode_;

  private JButton browseFolderButton_;
  private final JFileChooser folderFileChooser_ = new JFileChooser();
  private JButton newListButton_;

  private JTextField currentAddressTextField_;
  private JButton newViewButton_;

  private JEditorPane fileContentEditorPane_;

  private JButton saveUpdateButton_;

  private JButton saveElementButton_;

  private JButton saveFileButton_;

  private JButton browseFileButton_;
  private final JFileChooser fileFileChooser_ = new JFileChooser();

  private JEditorPane consoleEditorPane_;

  protected GUIView(NebuloElement root, AppKey appKey) {
    setTitle("Application Key : " +
        appKey.getKey().toString());

    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    initializeListTree(root);

    generateViewComponents();

    rootAddressTextField_.setText(root.getAddress().getAppKey().getKey().toString() +
        " : " + root.getObjectId().getKey().toString());

    folderFileChooser_.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    fileFileChooser_.setFileSelectionMode(JFileChooser.FILES_ONLY);
  }

  /**
   * Method creating and binding together view components. Fully automatically generated by GUI
   * design tool.
   */
  private void generateViewComponents() {
    setBounds(100, 100, 1254, 773);
    JPanel contentPane = new JPanel();
    contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
    setContentPane(contentPane);

    JPanel panel1 = new JPanel();
    panel1.setBorder(new LineBorder(Color.GRAY, 2));

    JList list = new JList();

    JPanel panel6 = new JPanel();
    panel6.setBorder(new LineBorder(Color.GRAY));

    JLabel lblInfoerrorConsole = new JLabel("Info/Error Console");
    GroupLayout glpanel1 = new GroupLayout(panel1);
    glpanel1.setHorizontalGroup(glpanel1.createParallelGroup(Alignment.LEADING).addGroup(
        glpanel1
            .createSequentialGroup()
            .addContainerGap()
            .addGroup(
                glpanel1
                    .createParallelGroup(Alignment.LEADING)
                    .addComponent(panel6, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 1182,
                        Short.MAX_VALUE)
                    .addGroup(
                        glpanel1
                            .createSequentialGroup()
                            .addComponent(lblInfoerrorConsole)
                            .addGap(546)
                            .addComponent(list, GroupLayout.PREFERRED_SIZE, 1,
                                GroupLayout.PREFERRED_SIZE))).addContainerGap()));
    glpanel1.setVerticalGroup(glpanel1.createParallelGroup(Alignment.TRAILING).addGroup(
        glpanel1
            .createSequentialGroup()
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(
                glpanel1.createParallelGroup(Alignment.TRAILING)
                    .addComponent(list, GroupLayout.PREFERRED_SIZE, 1, GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblInfoerrorConsole)).addPreferredGap(ComponentPlacement.RELATED)
            .addComponent(panel6, GroupLayout.PREFERRED_SIZE, 151, GroupLayout.PREFERRED_SIZE)
            .addGap(264)));

    JScrollPane consoleScrollPane = new JScrollPane();
    GroupLayout glPanel6 = new GroupLayout(panel6);
    glPanel6.setHorizontalGroup(glPanel6.createParallelGroup(Alignment.LEADING).addGroup(
        Alignment.TRAILING,
        glPanel6.createSequentialGroup().addContainerGap()
            .addComponent(consoleScrollPane, GroupLayout.DEFAULT_SIZE, 1163, Short.MAX_VALUE)
            .addContainerGap()));
    glPanel6.setVerticalGroup(glPanel6.createParallelGroup(Alignment.LEADING).addGroup(
        glPanel6.createSequentialGroup().addContainerGap()
            .addComponent(consoleScrollPane, GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
            .addContainerGap()));

    consoleEditorPane_ = new JEditorPane();
    consoleScrollPane.setViewportView(consoleEditorPane_);
    panel6.setLayout(glPanel6);
    panel1.setLayout(glpanel1);

    JPanel leftPanel = new JPanel();
    leftPanel.setBorder(new LineBorder(new Color(128, 128, 128), 2));

    JPanel rightPanel = new JPanel();
    rightPanel.setBorder(new LineBorder(Color.GRAY, 2));

    JPanel leftAddr = new JPanel();
    leftAddr.setBorder(new LineBorder(new Color(128, 128, 128), 2));

    getRootButton_ = new JButton("Get");

    rootAddressTextField_ = new JTextField();
    rootAddressTextField_.setFont(new Font("Dialog", Font.PLAIN, 20));

    rootAddressTextField_.setColumns(10);

    JLabel rootAddressLabel = new JLabel("Root address :");
    rootAddressLabel.setFont(new Font("Dialog", Font.BOLD, 15));

    GroupLayout glLeftAddr = new GroupLayout(leftAddr);
    glLeftAddr.setHorizontalGroup(glLeftAddr.createParallelGroup(Alignment.LEADING).addGroup(
        glLeftAddr
            .createSequentialGroup()
            .addContainerGap()
            .addComponent(rootAddressLabel)
            .addGap(26)
            .addComponent(rootAddressTextField_, GroupLayout.PREFERRED_SIZE, 199,
                GroupLayout.PREFERRED_SIZE).addGap(44).addComponent(getRootButton_)
            .addContainerGap(48, Short.MAX_VALUE)));
    glLeftAddr.setVerticalGroup(glLeftAddr.createParallelGroup(Alignment.LEADING).addGroup(
        glLeftAddr
            .createSequentialGroup()
            .addContainerGap()
            .addGroup(
                glLeftAddr
                    .createParallelGroup(Alignment.LEADING)
                    .addComponent(getRootButton_, GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                    .addGroup(
                        glLeftAddr
                            .createParallelGroup(Alignment.BASELINE)
                            .addComponent(rootAddressLabel)
                            .addComponent(rootAddressTextField_, GroupLayout.DEFAULT_SIZE, 31,
                                Short.MAX_VALUE))).addGap(15)));
    leftAddr.setLayout(glLeftAddr);

    JPanel panel2 = new JPanel();
    panel2.setBorder(new LineBorder(new Color(128, 128, 128), 2));

    JLabel currentAddressLabel = new JLabel("Selected element address :");
    currentAddressLabel.setFont(new Font("Dialog", Font.BOLD, 15));

    currentAddressTextField_ = new JTextField();
    currentAddressTextField_.setFont(new Font("Dialog", Font.PLAIN, 20));
    currentAddressTextField_.setColumns(10);

    newViewButton_ = new JButton("New");

    GroupLayout glPanel2 = new GroupLayout(panel2);
    glPanel2.setHorizontalGroup(glPanel2.createParallelGroup(Alignment.LEADING).addGroup(
        glPanel2
            .createSequentialGroup()
            .addContainerGap()
            .addComponent(currentAddressLabel)
            .addGap(26)
            .addComponent(currentAddressTextField_, GroupLayout.PREFERRED_SIZE, 216,
                GroupLayout.PREFERRED_SIZE).addGap(75).addComponent(newViewButton_)
            .addContainerGap(69, Short.MAX_VALUE)));
    glPanel2.setVerticalGroup(glPanel2.createParallelGroup(Alignment.LEADING).addGroup(
        glPanel2
            .createSequentialGroup()
            .addContainerGap()
            .addGroup(
                glPanel2
                    .createParallelGroup(Alignment.BASELINE)
                    .addComponent(currentAddressLabel)
                    .addComponent(currentAddressTextField_, GroupLayout.PREFERRED_SIZE, 34,
                        GroupLayout.PREFERRED_SIZE)
                    .addComponent(newViewButton_, GroupLayout.PREFERRED_SIZE, 32,
                        GroupLayout.PREFERRED_SIZE))
            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
    panel2.setLayout(glPanel2);
    GroupLayout glContentPane = new GroupLayout(contentPane);
    glContentPane
        .setHorizontalGroup(glContentPane.createParallelGroup(Alignment.TRAILING)
            .addGroup(
                glContentPane
                    .createSequentialGroup()
                    .addContainerGap()
                    .addGroup(
                        glContentPane
                            .createParallelGroup(Alignment.TRAILING)
                            .addComponent(panel1, Alignment.LEADING, GroupLayout.PREFERRED_SIZE,
                                1210, Short.MAX_VALUE)
                            .addGroup(
                                glContentPane
                                    .createSequentialGroup()
                                    .addGroup(
                                        glContentPane
                                            .createParallelGroup(Alignment.TRAILING)
                                            .addComponent(leftPanel, GroupLayout.DEFAULT_SIZE, 513,
                                                Short.MAX_VALUE)
                                            .addComponent(leftAddr, GroupLayout.DEFAULT_SIZE, 513,
                                                Short.MAX_VALUE))
                                    .addPreferredGap(ComponentPlacement.RELATED)
                                    .addGroup(
                                        glContentPane
                                            .createParallelGroup(Alignment.TRAILING)
                                            .addComponent(rightPanel, GroupLayout.PREFERRED_SIZE,
                                                0, Short.MAX_VALUE)
                                            .addComponent(panel2, GroupLayout.PREFERRED_SIZE,
                                                GroupLayout.DEFAULT_SIZE,
                                                GroupLayout.PREFERRED_SIZE)))).addContainerGap()));
    glContentPane.setVerticalGroup(glContentPane.createParallelGroup(Alignment.LEADING).addGroup(
        glContentPane
            .createSequentialGroup()
            .addContainerGap()
            .addGroup(
                glContentPane
                    .createParallelGroup(Alignment.LEADING)
                    .addComponent(leftAddr, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE,
                        GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(panel2, 0, 0, Short.MAX_VALUE))
            .addPreferredGap(ComponentPlacement.RELATED)
            .addGroup(
                glContentPane
                    .createParallelGroup(Alignment.TRAILING, false)
                    .addComponent(rightPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
                        Short.MAX_VALUE)
                    .addComponent(leftPanel, GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE))
            .addPreferredGap(ComponentPlacement.RELATED)
            .addComponent(panel1, GroupLayout.PREFERRED_SIZE, 201, Short.MAX_VALUE)
            .addContainerGap()));

    JPanel panel7 = new JPanel();
    panel7.setBorder(new LineBorder(Color.GRAY));

    fileContentEditorPane_ = new JEditorPane();

    JLabel lblDownloaded = new JLabel("File content");
    GroupLayout glPanel7 = new GroupLayout(panel7);
    glPanel7.setHorizontalGroup(glPanel7.createParallelGroup(Alignment.LEADING).addGroup(
        glPanel7
            .createSequentialGroup()
            .addContainerGap()
            .addGroup(
                glPanel7
                    .createParallelGroup(Alignment.LEADING)
                    .addGroup(Alignment.TRAILING,
                        glPanel7.createSequentialGroup().addComponent(lblDownloaded).addGap(312))
                    .addGroup(
                        glPanel7
                            .createSequentialGroup()
                            .addComponent(fileContentEditorPane_, GroupLayout.DEFAULT_SIZE, 686,
                                Short.MAX_VALUE).addContainerGap()))));
    glPanel7.setVerticalGroup(glPanel7.createParallelGroup(Alignment.LEADING).addGroup(
        glPanel7.createSequentialGroup().addGap(6).addComponent(lblDownloaded)
            .addPreferredGap(ComponentPlacement.RELATED)
            .addComponent(fileContentEditorPane_, GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
            .addGap(18)));
    panel7.setLayout(glPanel7);

    saveFileButton_ = new JButton("Save as a new file");

    saveElementButton_ = new JButton("Save as a new list element");

    browseFileButton_ = new JButton("Upload file (browse disc)");

    saveUpdateButton_ = new JButton("Save an update");

    GroupLayout glRightPanel = new GroupLayout(rightPanel);
    glRightPanel.setHorizontalGroup(glRightPanel
        .createParallelGroup(Alignment.LEADING)
        .addGroup(
            glRightPanel.createSequentialGroup().addContainerGap()
                .addComponent(panel7, GroupLayout.PREFERRED_SIZE, 662, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        .addGroup(
            glRightPanel.createSequentialGroup().addContainerGap(534, Short.MAX_VALUE)
                .addComponent(saveUpdateButton_).addContainerGap())
        .addGroup(
            glRightPanel
                .createSequentialGroup()
                .addContainerGap()
                .addComponent(saveElementButton_)
                .addGap(27)
                .addComponent(saveFileButton_, GroupLayout.PREFERRED_SIZE, 178,
                    GroupLayout.PREFERRED_SIZE).addGap(29).addComponent(browseFileButton_)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
    glRightPanel.setVerticalGroup(glRightPanel.createParallelGroup(Alignment.LEADING).addGroup(
        glRightPanel
            .createSequentialGroup()
            .addContainerGap()
            .addComponent(panel7, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                GroupLayout.PREFERRED_SIZE)
            .addGap(18)
            .addComponent(saveUpdateButton_)
            .addGap(52)
            .addGroup(
                glRightPanel
                    .createParallelGroup(Alignment.BASELINE)
                    .addComponent(saveElementButton_)
                    .addComponent(browseFileButton_)
                    .addComponent(saveFileButton_, GroupLayout.DEFAULT_SIZE,
                        GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addGap(83)));
    rightPanel.setLayout(glRightPanel);

    JScrollPane scrollPane = new JScrollPane();

    browseFolderButton_ = new JButton("Upload list (browse disc)");

    newListButton_ = new JButton("Create new empty list");
    GroupLayout glLeftPanel = new GroupLayout(leftPanel);
    glLeftPanel.setHorizontalGroup(glLeftPanel.createParallelGroup(Alignment.LEADING).addGroup(
        glLeftPanel
            .createSequentialGroup()
            .addContainerGap()
            .addGroup(
                glLeftPanel
                    .createParallelGroup(Alignment.TRAILING)
                    .addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 483, Short.MAX_VALUE)
                    .addGroup(
                        Alignment.LEADING,
                        glLeftPanel.createSequentialGroup().addComponent(browseFolderButton_)
                            .addPreferredGap(ComponentPlacement.RELATED, 257, Short.MAX_VALUE)
                            .addComponent(newListButton_))).addContainerGap()));
    glLeftPanel.setVerticalGroup(glLeftPanel.createParallelGroup(Alignment.LEADING).addGroup(
        glLeftPanel
            .createSequentialGroup()
            .addContainerGap()
            .addComponent(scrollPane, GroupLayout.PREFERRED_SIZE, 333, GroupLayout.PREFERRED_SIZE)
            .addGap(27)
            .addGroup(
                glLeftPanel.createParallelGroup(Alignment.BASELINE)
                    .addComponent(browseFolderButton_).addComponent(newListButton_))
            .addContainerGap(28, Short.MAX_VALUE)));

    leftPanel.setLayout(glLeftPanel);
    contentPane.setLayout(glContentPane);

    scrollPane.setViewportView(listTree_);
  }

  protected void initializeListTree(NebuloElement root) {
    rootTreeNode_ = new DefaultMutableTreeNode(root);
    listTreeModel_ = new DefaultTreeModel(rootTreeNode_);
    listTree_ = new JTree(listTreeModel_);
    listTreeModel_.insertNodeInto(new DefaultMutableTreeNode("dummy"), rootTreeNode_, 0);
  }

  /**
   * Sets new node as a list root.
   * @param root
   *          New root.
   * @param isList
   *          Is new root a list.
   * */
  protected void resetListTree(NebuloElement root, boolean isList) {
    rootTreeNode_ = new DefaultMutableTreeNode(root);
    listTreeModel_.setRoot(rootTreeNode_);
    if (isList) {
      listTreeModel_.insertNodeInto(new DefaultMutableTreeNode("dummy"), rootTreeNode_, 0);
    }

  }

  protected void refreshView() {
    currentAddressTextField_.setText("-- : --");
    fileContentEditorPane_.setText("");
  }

  protected String getInputRootAddress() {
    return rootAddressTextField_.getText();
  }

  protected String getInputCurrentAddress() {
    return currentAddressTextField_.getText();
  }

  protected void expandRoot() {
    listTree_.expandRow(0);
  }

  protected void setAddressAndFileContent(NebuloAddress address, String content) {
    setCurrentAddress(address);
    fileContentEditorPane_.setText(content);
  }

  protected void setCurrentAddress(NebuloAddress address) {
    String appKeyString = "--";
    String objectIdString = "--";

    if (address != null) {
      appKeyString = address.getAppKey().getKey().toString();
      objectIdString = address.getObjectId().getKey().toString();
    }

    currentAddressTextField_.setText(appKeyString +
        " : " + objectIdString);
  }

  protected String getFileContent() {
    return fileContentEditorPane_.getText();
  }

  /**
   * Updates view by adding newly created element to its parent.
   * @param newElement
   *          Newly created element.
   * @param isList
   *          Is newly created element a list.
   * */
  protected void updateParentListView(NebuloElement newElement, boolean isList) {
    // Find parent.
    DefaultMutableTreeNode parentNode;
    if (getSelectedTreeNode().isLeaf()) {
      parentNode = (DefaultMutableTreeNode) getSelectedTreeNode().getParent();
    } else {
      parentNode = getSelectedTreeNode();
    }

    // If newly added element is a list, add "dummy" child.
    DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(newElement);
    if (isList) {
      listTreeModel_.insertNodeInto(new DefaultMutableTreeNode("dummy"), newNode, 0);
    }
    listTreeModel_.insertNodeInto(newNode, parentNode, parentNode.getChildCount());

    // Scroll to newly inserted node.
    TreeNode[] nodes = listTreeModel_.getPathToRoot(newNode);
    TreePath path = new TreePath(nodes);
    listTree_.scrollPathToVisible(path);
  }

  protected void showMessage(String message) {
    consoleEditorPane_.setText(message);
  }

  protected void setSelectionAtComponent(TreePath selectionPath) {
    listTree_.setSelectionPath(selectionPath);
  }

  private DefaultMutableTreeNode getSelectedTreeNode() {
    return (DefaultMutableTreeNode) listTree_.getLastSelectedPathComponent();
  }

  protected NebuloElement getSelectedElement() {
    DefaultMutableTreeNode selectedNode = getSelectedTreeNode();

    if (selectedNode == null) {
      return null;
    }

    return (NebuloElement) selectedNode.getUserObject();
  }

  protected NebuloElement getCurrentList() {
    DefaultMutableTreeNode selectedNode = getSelectedTreeNode();

    if (selectedNode.isLeaf()) {
      DefaultMutableTreeNode parentNode = (DefaultMutableTreeNode) selectedNode.getParent();
      return (NebuloElement) parentNode.getUserObject();
    } else {
      return (NebuloElement) selectedNode.getUserObject();
    }
  }

  protected void removeAllChildrenFromSelectedNode() {
    DefaultMutableTreeNode selectedNode = getSelectedTreeNode();

    int numberOfChildren = selectedNode.getChildCount();
    for (int i = 0; i < numberOfChildren; ++i) {
      listTreeModel_.removeNodeFromParent((MutableTreeNode) selectedNode.getFirstChild());
    }
  }

  /**
   * Appends given element to the currently selected parent node. If element is a list, gives it a
   * "dummy" child to indicate it.
   */
  protected void addChildToSelectedNode(NebuloElement newElement, boolean isList) {
    DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(newElement);
    DefaultMutableTreeNode selectedNode = getSelectedTreeNode();
    if (isList) {
      listTreeModel_.insertNodeInto(new DefaultMutableTreeNode("dummy"), newNode, 0);
    }
    listTreeModel_.insertNodeInto(newNode, selectedNode, selectedNode.getChildCount());
  }

  protected File getFileFromFileChooserDialog() {
    return getAbstractFileFromFileChooserDialog(folderFileChooser_);
  }

  protected File getFolderFromFileChooserDialog() {
    return getAbstractFileFromFileChooserDialog(fileFileChooser_);
  }

  private File getAbstractFileFromFileChooserDialog(JFileChooser fileChooser) {
    int returnValue = fileChooser.showDialog(GUIView.this, "Upload");
    if (returnValue == JFileChooser.APPROVE_OPTION) {
      File file = fileChooser.getSelectedFile();
      return file;
    }
    return null;
  }

  protected void addNodeSelectionListener(TreeSelectionListener listener) {
    listTree_.addTreeSelectionListener(listener);
  }

  protected void addNodeExpansionListener(TreeWillExpandListener listener) {
    listTree_.addTreeWillExpandListener(listener);
  }

  protected void addSaveFileButtonListener(ActionListener listener) {
    saveFileButton_.addActionListener(listener);
  }

  protected void addSaveElementButtonListener(ActionListener listener) {
    saveElementButton_.addActionListener(listener);
  }

  protected void addNewListButtonListener(ActionListener listener) {
    newListButton_.addActionListener(listener);
  }

  protected void addBrowseFolderButtonListener(ActionListener listener) {
    browseFolderButton_.addActionListener(listener);
  }

  protected void addBrowseFileButtonListener(ActionListener listener) {
    browseFileButton_.addActionListener(listener);
  }

  protected void addGetRootButtonListener(ActionListener listener) {
    getRootButton_.addActionListener(listener);
  }

  protected void addNewViewButtonListener(ActionListener listener) {
    newViewButton_.addActionListener(listener);
  }

  protected void addSaveUpdateButtonListener(ActionListener listener) {
    saveUpdateButton_.addActionListener(listener);
  }

}
